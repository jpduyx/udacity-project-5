{
	"name": "Dataflow Aggregate Data",
	"properties": {
		"description": "step 5.3",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SQLDB__Transaction_PAYROLL_DATA",
						"type": "DatasetReference"
					},
					"name": "sqldbpayrolldata"
				},
				{
					"dataset": {
						"referenceName": "nycpayrollHISTcsv",
						"type": "DatasetReference"
					},
					"name": "datalakeHistoryPayrollData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "table_synapse_nycpayroll_sumary",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "union1"
				},
				{
					"name": "fiscalyearFilter",
					"description": "filter on fiscal year"
				},
				{
					"name": "totalPaid"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     level as integer (FiscalYear)",
				"}",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sqldbpayrolldata",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as string,",
				"          AgencyCode as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as string,",
				"          PayBasis as string,",
				"          RegularHours as string,",
				"          RegularGrossPaid as string,",
				"          OTHours as string,",
				"          TotalOTPaid as string,",
				"          TotalOtherPay as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> datalakeHistoryPayrollData",
				"sqldbpayrolldata, datalakeHistoryPayrollData union(byName: true)~> union1",
				"union1 filter(ERROR_FUNCTION('toInteger(FiscalYear) => $dataflow_param_fiscalyear__NEW_LINE_N____NEW_LINE_N__')) ~> fiscalyearFilter",
				"fiscalyearFilter derive(TotalPayd = RegularGrossPaid+TotalOTPaid+TotalOtherPay) ~> totalPaid",
				"totalPaid aggregate(groupBy(AgencyName,",
				"          FiscalYear)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FiscalYear as integer,",
				"          AgencyName as string,",
				"          TotalPaid as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}